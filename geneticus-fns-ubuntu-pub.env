g_dir='/home/parallels/invitae/locus-web-curation'
mongo_exe='mongo'
LOCUS_SRLC='gauss'

# ML's dev env config
export "LOCUS_SRLC=gauss"

function g-env () {
  if [[ "${LOCUS_SRLC}" != "gauss" ]]
  then
    export "old_locus_srlc=$LOCUS_SRLC"
    export "LOCUS_SRLC=gauss"
    echo "*** changed LOCUS_SRLC from ${old_locus_srlc} to ${LOCUS_SRLC}"
  else
    echo "*** LOCUS_SRLC is correctly set to $LOCUS_SRLC"
  fi

}

function findn() {
  find ./ -name $1
}

function g-jsx () {
  g-cd
  cd curation/geneticus/static/js/react
  jsx --extension jsx src build
}

function g-cd () {
  cd "${g_dir}"
}

function g-ve() {
  g-cd
  g-env
  source etc/setup.bash
}

function g-runserver() {
  g-cd
  cd curation
  echo "yes" | python manage.py collectstatic
  gunicorn -c ../etc/gunicorn_dev.py \
  -b 0.0.0.0:8000 -t 99999 "wsgi:build_app(debug=False)"
}

function g-runserver-debug() {
  g-cd
  cd curation
  python manage.py collectstatic --clear
  gunicorn -c ../etc/gunicorn_dev.py \
  -b 0.0.0.0:8000 -t 99999 "wsgi:build_app(debug=True)"
}

function g-mongodb-clone() {
  mongo_master=$(mongo --quiet --eval "db.isMaster()['primary']" mongo-db/local-db)
  if [[ "${mongo_master}" = "" ]]
  then
    echo "### didn't find the mongo master!"
  else
    ${mongo_exe} curation_local << EOTEXT
       db.isMaster();
       db.dropDatabase();
       db.copyDatabase('curation_geneticus_stg', 'curation_local', '${mongo_master}');
EOTEXT
  fi
}

# alias g-mongo=g-mongodb-clone BROKEN 7/16
alias g-rs=g-runserver
alias g-rsd=g-runserver-debug
alias guni="ps aux | grep gunicorn"

# Parallels Geneticus VM #
alias sshg="ssh parallels@gauss" # ssh gauss, wasn't able to change username to ml
alias vmc="prlctl stop 'Geneticus VM'"  # Stop VM
alias vm="prlctl start 'Geneticus VM'"  # Start VM
alias vms="prlctl list --all"
